[project]
name = "claude-code-tracer"
version = "0.1.0"
description = "Claude Code のインタラクティブセッションを追跡・記録し、Supabase に保存する開発支援ツール"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.13"
keywords = ["claude", "ai", "coding-assistant", "logging", "supabase"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Version Control :: Git",
]
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "supabase>=2.0.0",
    "claude-code-sdk>=0.1.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-dotenv>=1.0.0",
    "aiofiles>=23.2.1",
    "httpx>=0.25.0",
    "python-multipart>=0.0.6",
    "scikit-learn>=1.3.0",
    "pandas>=2.1.0",
    "numpy>=1.26.0",
    "PyGithub>=2.1.0",
    "click>=8.1.0",
    "rich>=13.7.0",
    "typer>=0.9.0",
    "watchdog>=3.0.0",
    "psutil>=5.9.0",
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.43b0",
]

[project.urls]
Homepage = "https://github.com/your-org/claude-code-tracer"
Repository = "https://github.com/your-org/claude-code-tracer"
Documentation = "https://github.com/your-org/claude-code-tracer/tree/main/docs"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-env>=1.1.0",
    "black>=23.12.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "isort>=5.13.0",
    "pre-commit>=3.6.0",
    "ipdb>=0.13.13",
    "ipython>=8.18.0",
]

[project.scripts]
claude-tracer = "claude_code_tracer.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-env>=1.1.0",
    "black>=23.12.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "isort>=5.13.0",
    "pre-commit>=3.6.0",
    "ipdb>=0.13.13",
    "ipython>=8.18.0",
]

[tool.poetry]
name = "claude-code-tracer"
version = "0.1.0"
description = "Claude Code のインタラクティブセッションを追跡・記録し、Supabase に保存する開発支援ツール"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/your-org/claude-code-tracer"
repository = "https://github.com/your-org/claude-code-tracer"
documentation = "https://github.com/your-org/claude-code-tracer/tree/main/docs"
keywords = ["claude", "ai", "coding-assistant", "logging", "supabase"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Version Control :: Git",
]

[tool.poetry.dependencies]
python = "^3.13"
fastapi = "^0.104.0"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
supabase = "^2.0.0"
claude-code-sdk = "^0.1.0"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
python-dotenv = "^1.0.0"
asyncio = "^3.4.3"
aiofiles = "^23.2.1"
httpx = "^0.25.0"
python-multipart = "^0.0.6"
scikit-learn = "^1.3.0"
pandas = "^2.1.0"
numpy = "^1.26.0"
PyGithub = "^2.1.0"
click = "^8.1.0"
rich = "^13.7.0"
typer = "^0.9.0"
watchdog = "^3.0.0"
psutil = "^5.9.0"
prometheus-client = "^0.19.0"
opentelemetry-api = "^1.21.0"
opentelemetry-sdk = "^1.21.0"
opentelemetry-instrumentation-fastapi = "^0.43b0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-env = "^1.1.0"
black = "^23.12.0"
ruff = "^0.1.0"
mypy = "^1.7.0"
isort = "^5.13.0"
pre-commit = "^3.6.0"
ipdb = "^0.13.13"
ipython = "^8.18.0"

[tool.poetry.scripts]
claude-tracer = "claude_code_tracer.cli:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "supabase.*"
ignore_missing_imports = true

[tool.ruff]
target-version = "py313"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=claude_code_tracer",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
pythonpath = ["src"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]