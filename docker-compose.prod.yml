version: '3.9'

services:
  # Claude Code Tracer API Service (Production)
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: claude-tracer:latest
    container_name: claude-tracer-api
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    environment:
      - ENVIRONMENT=production
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    command: gunicorn claude_code_tracer.api.main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000
    depends_on:
      - redis
    networks:
      - claude-tracer-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Background Monitor Service (Production)
  monitor:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: claude-tracer:latest
    container_name: claude-tracer-monitor
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - ENVIRONMENT=production
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    command: python -m claude_code_tracer.core.monitor --production
    depends_on:
      - api
      - redis
    networks:
      - claude-tracer-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Redis for caching and session management (Production)
  redis:
    image: redis:7-alpine
    container_name: claude-tracer-redis
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost
    volumes:
      - redis_data:/data
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    networks:
      - claude-tracer-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: claude-tracer-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites:/etc/nginx/sites-enabled:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/usr/share/nginx/html/static:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
    networks:
      - claude-tracer-network
    restart: always
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection (Production)
  prometheus:
    image: prom/prometheus:latest
    container_name: claude-tracer-prometheus
    ports:
      - "127.0.0.1:9090:9090"  # Only bind to localhost
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - claude-tracer-network
    restart: always
    depends_on:
      - api

  # Grafana for metrics visualization (Production)
  grafana:
    image: grafana/grafana:latest
    container_name: claude-tracer-grafana
    ports:
      - "127.0.0.1:3001:3000"  # Only bind to localhost
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_SERVER_ROOT_URL=https://metrics.your-domain.com
    networks:
      - claude-tracer-network
    restart: always
    depends_on:
      - prometheus

  # Log aggregation with Loki (Production)
  loki:
    image: grafana/loki:latest
    container_name: claude-tracer-loki
    ports:
      - "127.0.0.1:3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - claude-tracer-network
    restart: always

  # Promtail for log shipping (Production)
  promtail:
    image: grafana/promtail:latest
    container_name: claude-tracer-promtail
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/claude-tracer:ro
      - nginx_logs:/var/log/nginx:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - claude-tracer-network
    restart: always
    depends_on:
      - loki

  # Backup service (Production)
  backup:
    image: offen/docker-volume-backup:latest
    container_name: claude-tracer-backup
    environment:
      - BACKUP_SOURCES=/backup
      - BACKUP_CRON_EXPRESSION=0 3 * * *  # Daily at 3 AM
      - BACKUP_RETENTION_DAYS=7
      - BACKUP_FILENAME_PATTERN=claude-tracer-backup-%Y%m%d-%H%M%S
      - AWS_S3_BUCKET_NAME=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - redis_data:/backup/redis:ro
      - prometheus_data:/backup/prometheus:ro
      - grafana_data:/backup/grafana:ro
      - loki_data:/backup/loki:ro
      - ./logs:/backup/logs:ro
    networks:
      - claude-tracer-network
    restart: always

networks:
  claude-tracer-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  nginx_logs:
    driver: local