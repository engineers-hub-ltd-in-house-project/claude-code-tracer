version: '3.9'

services:
  # Claude Code Tracer API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: claude-tracer-api
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./scripts:/app/scripts
      - ./logs:/app/logs
      - ./.env:/app/.env
    environment:
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=development
    command: uvicorn claude_code_tracer.api.main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      - redis
    networks:
      - claude-tracer-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Background Monitor Service
  monitor:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: claude-tracer-monitor
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
      - ./.env:/app/.env
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For monitoring Docker containers
    environment:
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=development
    command: python -m claude_code_tracer.core.monitor
    depends_on:
      - api
      - redis
    networks:
      - claude-tracer-network
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: claude-tracer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - claude-tracer-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: claude-tracer-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - claude-tracer-network
    depends_on:
      - api

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: claude-tracer-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    networks:
      - claude-tracer-network
    depends_on:
      - prometheus

  # Jaeger for distributed tracing (optional)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: claude-tracer-jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"  # Jaeger UI
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - claude-tracer-network
    profiles:
      - tracing

  # Development database (for local testing without Supabase)
  postgres:
    image: postgres:16-alpine
    container_name: claude-tracer-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=claude_tracer
      - POSTGRES_PASSWORD=development_password
      - POSTGRES_DB=claude_tracer_dev
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - claude-tracer-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U claude_tracer"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - local-db

  # Adminer for database management (development only)
  adminer:
    image: adminer:latest
    container_name: claude-tracer-adminer
    ports:
      - "8080:8080"
    networks:
      - claude-tracer-network
    depends_on:
      - postgres
    profiles:
      - local-db

networks:
  claude-tracer-network:
    driver: bridge

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  postgres_data: